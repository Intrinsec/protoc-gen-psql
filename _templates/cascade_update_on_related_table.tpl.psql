CREATE OR REPLACE FUNCTION {{ .CreateFunctionName }}()
	RETURNS VOID
	LANGUAGE plpgsql
AS $fn_create_trigger$
DECLARE
	dst_table_name TEXT;
	dst_pk_column_name TEXT;
	t timestamptz := clock_timestamp();
BEGIN
	SELECT
		kcu2.table_name,
		kcu2.column_name
	INTO
		dst_table_name,
		dst_pk_column_name
	FROM
		information_schema.key_column_usage AS kcu
		INNER JOIN information_schema.referential_constraints AS rc ON rc.constraint_name = kcu.constraint_name
		INNER JOIN information_schema.key_column_usage AS kcu2 ON kcu2.constraint_name = rc.unique_constraint_name
	WHERE
		kcu.table_name = lower('{{ .RelationTable }}')
		AND kcu.constraint_name LIKE '%_fkey'
		AND kcu.column_name = '{{ .ForeignKey }}';
	
	EXECUTE FORMAT($format_function$
		CREATE OR REPLACE FUNCTION {{ .FunctionName }}()
			RETURNS trigger
			LANGUAGE plpgsql
			SECURITY DEFINER
		AS $$
		BEGIN
			IF TG_OP = 'UPDATE' AND NEW IS NOT DISTINCT FROM OLD THEN
				RETURN NULL;
			END IF;

			IF TG_OP IN ('DELETE', 'UPDATE') THEN
			{{- range $Update := .Updates }}
				UPDATE
					%1$I
				SET
					{{ $Update.Field }} = {{ $Update.Value }}
				WHERE
					%2$I = OLD.{{ $.ForeignKey }};
			{{ end -}}
			END IF;
			
			IF TG_OP IN ('INSERT', 'UPDATE') THEN
			{{- range $Update := .Updates }}
				UPDATE
					%1$I
				SET
					{{ $Update.Field }} = {{ $Update.Value }}
				WHERE
					%2$I = NEW.{{ $.ForeignKey }};
			{{ end -}}
			END IF;

			RETURN NULL;
		END
		$$;
	$format_function$, dst_table_name, dst_pk_column_name);

	DROP TRIGGER IF EXISTS {{ .TriggerName }} ON {{ .RelationTable}};

	DROP TRIGGER IF EXISTS {{ .TriggerDelName }} ON {{ .RelationTable}};

	CREATE TRIGGER {{ .TriggerName }}
		AFTER INSERT OR UPDATE ON {{ .RelationTable }}
		FOR EACH ROW
		EXECUTE FUNCTION {{ .FunctionName }}();
	
	CREATE CONSTRAINT TRIGGER {{ .TriggerDelName }}
		AFTER DELETE ON {{ .RelationTable }}
		DEFERRABLE INITIALLY DEFERRED
		FOR EACH ROW
		EXECUTE FUNCTION {{ .FunctionName }}();
END
$fn_create_trigger$;

SELECT {{ .CreateFunctionName }}();
