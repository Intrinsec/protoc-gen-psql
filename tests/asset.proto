syntax = "proto3";

package asset;

import "google/protobuf/timestamp.proto";
import "psql/psql.proto";

option go_package = "intrinsec.com/test/test/pkg/model;model";

option (psql.initialization) = "-- pgcrypto used for uuid";
option (psql.initialization) = "CREATE EXTENSION IF NOT EXISTS pgcrypto;";
option (psql.initialization) = "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;";
option (psql.initialization) = "CREATE EXTENSION IF NOT EXISTS dblink;";

option (psql.finalization) = "CREATE OR REPLACE FUNCTION fn_asset_example_finalization() RETURNS trigger AS $$ BEGIN NEW.update_time := now(); RETURN NEW; END; $$ LANGUAGE plpgsql;";
option (psql.finalization) = "DROP TRIGGER IF EXISTS tg_example_trigger ON Asset;";
option (psql.finalization) = "CREATE TRIGGER tg_example_trigger BEFORE UPDATE ON Asset FOR EACH ROW EXECUTE FUNCTION fn_asset_example_finalization();";


// Create DB if it do not exists
option (psql.initialization) = "CREATE DATABASE testdb;";

message Asset {

    option (psql.tableType) = DATA;
    string uuid = 1 [
        (psql.column) = "uuid PRIMARY KEY DEFAULT gen_random_uuid()"
    ];

    bool enabled = 2 [
        (psql.column) = "boolean NOT NULL DEFAULT TRUE"
    ];

    google.protobuf.Timestamp update_time = 6 [
        (psql.column)                       = "timestamp with time zone NOT NULL DEFAULT now()",
        (psql.auto_fill_on_update)          = "now()"
    ];
}


message GroupsAssetAsset {

    option (psql.tableType) = RELATION;
    option (psql.constraint) = "CONSTRAINT ck_no_self_loops CHECK (parent_id <> child_id)";

    string parent_id = 1 [
        (psql.column) = "uuid REFERENCES Asset(uuid) ON DELETE CASCADE"
        ];
    option (psql.constraint) = "UNIQUE (parent_id, child_id)";
    string child_id = 2 [
        (psql.column) = "uuid REFERENCES Asset(uuid) ON DELETE CASCADE",
        (psql.cascade_update) = {
            table: "Asset",
            key: "uuid",
            updates: [
                {
                    field: "update_time",
                    value: "now()"
                }
            ];
        }
    ];
}

message NoSQL {
   option (psql.disabled) = true;

   string test = 1;
}
